import Head from "next/head";
import stylesheet from "../styles/listening.module.css";
import Header from "@/components/header";
import ReadingQuestion from "@/components/readingQuestion";
import { useEffect, useRef, useState } from "react";
import PauseCircleOutlineOutlinedIcon from "@mui/icons-material/PauseCircleOutlineOutlined";
import PlayCircleOutlineOutlinedIcon from "@mui/icons-material/PlayCircleOutlineOutlined";
import { State } from "@/context/context";
const options = ["Option 1", "Option 2", "Option 3", "Option 4"];

export default function Listening({ children, data }) {
  const audioRef = useRef(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [questionUrl,setQuestionUrl]=useState('')
  const quizState = State();
  const { quizInfo } = quizState;
  useEffect(() => {
    const playButton = document.getElementById("playButton");
    const playCount = document.getElementById("playCount");
    const currentTime = document.getElementById("currentTime");

    playButton.addEventListener("click", () => {
      const audioElement = audioRef.current;

      if (audioElement) {
        if (!isPlaying) {
          audioElement.play();
        } else {
          audioElement.pause();
        }

        setIsPlaying(!isPlaying);
      }
    });

    audioRef?.current?.addEventListener("timeupdate", (event) => {
      const audioElement = audioRef.current;
      if (audioElement) {
        const duration = audioElement.duration;
        const currentTimeValue = Math.floor(audioElement.currentTime);
        const durationValue = Math.floor(duration);
        const timeString = `${formatTime(currentTimeValue)} / ${formatTime(
          durationValue
        )}`;

        currentTime.textContent = timeString;
      }
    });
  }, [isPlaying,quizInfo["activeStep"]])

  function formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, "0")}:${remainingSeconds
      .toString()
      .padStart(2, "0")}`;
  }
  const getActiveStepQuestion = () => {
    const getQuestionAudioUrl = data.audioList[quizInfo["activeStep"]]?.fields?.file?.url
    setQuestionUrl(`http:${getQuestionAudioUrl}`)
    return `http:${getQuestionAudioUrl}`;
  };
  useEffect(()=>{
    getActiveStepQuestion()
  },[quizInfo["activeStep"]])
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={stylesheet.page_body}>
        <div className={stylesheet.grid}>
          <div className={stylesheet.audio_track}>
            <div className={stylesheet.custom_audio_player}>
              <p className={stylesheet.audio_trackp1}>
                You will hear 10 speakers.
              </p>
              <p className={stylesheet.audio_trackp2}>
                Choose the best option for what comes next in the conversation.
                You can play the recording <span>TWO</span> times.
              </p>
              <div className={stylesheet.btn_bx}>
                <button id="playButton">
                  {!isPlaying ? (
                    <PlayCircleOutlineOutlinedIcon />
                  ) : (
                    <PauseCircleOutlineOutlinedIcon/>
                  )}
                </button>
                <div>
                  <p id="playCount">Play's left: 2</p>
                  <p id="currentTime">00:00 / 00:00</p>
                </div>
              </div>
            </div>

            <audio ref={audioRef} >
              <source src={questionUrl} type="audio/mpeg" />
              Your browser does not support the audio element.
            </audio>
          </div>
          <div className={stylesheet.question}>{children}</div>
        </div>
      </div>
    </>
  );
}
